
import sys, getopt
import os.path
from pathlib import Path
from utils import processOrthoFind as pof
from utils import processDrimm as pd
from utils import processBlocks as pb


def printHelp():
    print ('')
    print ('input example:')
    print ('python program.py -i .\input\ -o .\output  -c 20')
    print ('')
    print ('python program.py -i <inputPath> -o <Outpath>')
    print ('')
    print(' -i   inputPath : Please enter the inputPath')
    print(' -o   Outpath : Please enter the path generated by the output file')
    print('[-s]  MaxGeneDupLength : You can enter the size you want to filter. The default value is 4')
    print('[-c]  CycleLength : Minimum cycle length in DRIMM-Synteny algorithm. The default value is 20')
    print('[-d]  DustLength : Maximum genetic diversity in DRIMM-Synteny algorithm. The default value is 20')
    print('[-p]  SimplePercentage : Percentage of production simplification, ranging from 0 to 1. The default value is 0.5')
def processInput(argv):
    inputPath = ''
    outputPath = ''
    OrthogroupsPath=''
    gffs=[]
    size=4
    cycleLength="20"
    dustLength="20"
    gff_list=[]
    simpleRage=0
    try:
        opts,args = getopt.getopt(argv,"hi:o:s:c:d:p:")
    except getopt.GetoptError:
        print("error")
        printHelp()
        sys.exit(2)
    if(len(opts)<1):
        printHelp()
        sys.exit()
    for opt, arg in opts:
        if opt == '-h':
            printHelp()
            sys.exit()
        elif opt in ("-i"):
            inputPath = arg
        elif opt in ("-o"):
            outputPath = arg  
        elif opt in ("-s"):
            size = arg   
        elif opt in ("-c"):
            cycleLength = arg   
        elif opt in ("-d"):
            dustLength = arg
        elif opt in ("-p"):
            simpleRage = arg      
    if(inputPath=="" or outputPath==""):
        print("you need to input -i or -o")
        printHelp()
        sys.exit()
    for root, dirs, files in os.walk(inputPath):  
        for file in files:
            if(file.split('.')[-1]=="tsv"):
                OrthogroupsPath=inputPath+file
            if(file.split('.')[-1]=='gff'):
                gff_list.append(inputPath+file)
        break
    if( not Path(outputPath).exists()):
            os.makedirs(outputPath)
    if(OrthogroupsPath==''):
        print("[ERROR]You need to include the TSV file in the -i input")
        printHelp()
        sys.exit()
    if(len(gff_list)==0):
        print("[ERROR]You need to include the gff file in the -i input")
        printHelp()
        sys.exit()
    return OrthogroupsPath,outputPath,gff_list,size,cycleLength,dustLength,simpleRage
def main(argv):
    #input
    OrthogroupsPath,outputPath,gff_list,size,cycleLength,dustLength,simpleRage= processInput(argv)
   
    #input sequence
    speciesAndChrLen= pof.processOrthoFind(OrthogroupsPath,gff_list,outputPath,size,simpleRage)
    processDrimm = pd.processDrimm(outputPath+"/processOrthoFind/sample.sequence",outputPath+"/drimmSyntenyOutput",cycleLength,dustLength,speciesAndChrLen)
    #Execute Drimm-synteny
    processDrimm.execute()
    # Processing blocks
    pb.processBlocks(outputPath,speciesAndChrLen)

if __name__ == "__main__":
        main(sys.argv[1:])